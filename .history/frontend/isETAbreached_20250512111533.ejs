<!DOCTYPE html>
<html>
<head>
  <title>Check if ETA is Breached</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    textarea { width: 100%; height: 300px; font-family: monospace; }
    button { margin-top: 15px; padding: 10px 20px; }
    #result { margin-top: 20px; font-weight: bold; }
  </style>
</head>
<body>
  <h1>Check if ETA is Breached</h1>

  <p>Paste your JSON payload below:</p>
  <textarea id="jsonInput">
{
  "createdAt": "2024-05-10T10:00:00Z",
  "domain": "ONDC:RET10",
  "fulfillments": [
    {
      "type": "Delivery",
      "state": {
        "descriptor": {
          "code": "Order-picked-up"
        }
      },
      "@ondc/org/TAT": "PT4H"
    }
  ]
}
  </textarea>

  <button onclick="checkETA()">Check</button>
  <div id="result"></div>

  <script>
    const excludeBufferState = ["Order-confirmed", "Order-placed"];
    const includeBufferState = ["Order-picked-up", "Out-for-delivery"];

    function isoDurationToMilliseconds(iso) {
      const regex = /P(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?/;
      const match = iso.match(/P(?:(\d+)D)?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?)?/);

      if (!match) return 0;

      const days = parseInt(match[1] || "0", 10);
      const hours = parseInt(match[2] || "0", 10);
      const minutes = parseInt(match[3] || "0", 10);
      const seconds = parseInt(match[4] || "0", 10);

      return (((days * 24 + hours) * 60 + minutes) * 60 + seconds) * 1000;
    }

    function isETABreached(data) {
      if (!data || typeof data !== "object") return false;
      if (!data.createdAt) return false;
      if (!Array.isArray(data.fulfillments) || data.fulfillments.length === 0) return false;

      const currentTime = new Date();
      const createdAt = new Date(data.createdAt);

      const deliveryFulfillment = data.fulfillments.find(f => f?.type === "Delivery");
      if (!deliveryFulfillment || !deliveryFulfillment["@ondc/org/TAT"]) return false;

      const deliveryTime = isoDurationToMilliseconds(deliveryFulfillment["@ondc/org/TAT"]);
      const deliveryETA = new Date(createdAt.getTime() + deliveryTime);

      const stateCode = deliveryFulfillment?.state?.descriptor?.code;
      if (!stateCode) return false;

      if (excludeBufferState.includes(stateCode)) {
        return currentTime >= deliveryETA;
      } else if (includeBufferState.includes(stateCode)) {
        const ETA = deliveryETA - createdAt;
        const halfETA = Math.max(ETA / 2, 0);
        let buffer;

        if (data.domain === "ONDC:RET10") {
          buffer = Math.min(0.5 * 60 * 60 * 1000, halfETA);
        } else {
          buffer = Math.min(2 * 24 * 60 * 60 * 1000, halfETA);
        }

        return currentTime >= new Date(deliveryETA.getTime() + buffer);
      } else {
        return false;
      }
    }

    function checkETA() {
      const input = document.getElementById("jsonInput").value;
      let data;

      try {
        data = JSON.parse(input);
      } catch (err) {
        document.getElementById("result").innerText = "❌ Invalid JSON format.";
        return;
      }

      const result = isETABreached(data);
      document.getElementById("result").innerText = result
        ? "⚠️ ETA is BREACHED"
        : "✅ ETA is NOT breached";
    }
  </script>
</body>
</html>
